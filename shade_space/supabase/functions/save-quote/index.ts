import { createClient } from 'npm:@supabase/supabase-js@2.39.3';

interface FabricInfo {
  id: string;
  label: string;
}

const FABRICS: FabricInfo[] = [
  { id: 'monotec370', label: 'Monotec' },
  { id: 'extrablock330', label: 'ExtraBlock' },
  { id: 'shadetec320', label: 'Shadetec' },
];

function generateDefaultQuoteName(config: any): string {
  const corners = config?.corners || 3;
  const fabricType = config?.fabricType;
  const fabricColor = config?.fabricColor;

  const selectedFabric = FABRICS.find(f => f.id === fabricType);
  const fabricLabel = selectedFabric?.label || 'Custom';

  const now = new Date();
  const month = now.toLocaleDateString('en-US', { month: 'short' });
  const day = now.getDate();

  let quoteName = `${corners}-Corner ${fabricLabel}`;

  if (fabricColor) {
    quoteName += ` ${fabricColor}`;
  }

  quoteName += ` Shade Sail - ${month} ${day}`;

  if (quoteName.length > 100) {
    quoteName = quoteName.substring(0, 97) + '...';
  }

  return quoteName;
}

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Client-Info, Apikey',
};

Deno.serve(async (req: Request) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, {
      status: 200,
      headers: corsHeaders,
    });
  }

  try {
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseKey = Deno.env.get('SUPABASE_ANON_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseKey);

    if (req.method === 'POST') {
      // Save a new quote
      const { config, calculations, email, quoteName, customerReference } = await req.json();

      if (!config || !calculations) {
        return new Response(
          JSON.stringify({ error: 'Missing required fields: config and calculations' }),
          { 
            status: 400, 
            headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
          }
        );
      }

      // Generate unique quote reference
      const { data: refData, error: refError } = await supabase
        .rpc('generate_quote_reference');

      if (refError) {
        throw new Error(`Failed to generate quote reference: ${refError.message}`);
      }

      const quoteReference = refData;

      let finalQuoteName = quoteName?.trim() || '';
      let nameAutoGenerated = false;

      if (!finalQuoteName) {
        finalQuoteName = generateDefaultQuoteName(config);
        nameAutoGenerated = true;
      }

      if (finalQuoteName.length > 100) {
        finalQuoteName = finalQuoteName.substring(0, 100);
      }

      let finalCustomerReference = customerReference?.trim() || null;
      if (finalCustomerReference && finalCustomerReference.length > 50) {
        finalCustomerReference = finalCustomerReference.substring(0, 50);
      }

      // Generate access token
      const { data: tokenData, error: tokenError } = await supabase
        .rpc('generate_access_token');

      if (tokenError) {
        throw new Error(`Failed to generate access token: ${tokenError.message}`);
      }

      const accessToken = tokenData;

      // Generate user identifier if email provided
      let userIdentifier = null;
      if (email) {
        const { data: identifierData, error: identifierError } = await supabase
          .rpc('get_user_identifier', { email });

        if (!identifierError) {
          userIdentifier = identifierData;
        }
      }

      // Insert the quote
      const { data: quote, error: insertError } = await supabase
        .from('saved_quotes')
        .insert({
          quote_reference: quoteReference,
          quote_name: finalQuoteName,
          customer_reference: finalCustomerReference,
          name_auto_generated: nameAutoGenerated,
          customer_email: email || null,
          access_token: accessToken,
          user_identifier: userIdentifier,
          config_data: config,
          calculations_data: calculations,
        })
        .select()
        .single();

      if (insertError) {
        throw new Error(`Failed to save quote: ${insertError.message}`);
      }

      // If email provided, add to Shopify customers
      let shopifyCustomerId: string | null = null;
      let shopifyCustomerCreated = false;

      if (email) {
        try {
          const shopifyResponse = await fetch(
            `${supabaseUrl}/functions/v1/add-shopify-customer`,
            {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${supabaseKey}`,
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                email: email,
                tags: ['quote_saved', 'configurator_user'],
                quoteReference: quoteReference,
                totalPrice: calculations.totalPrice,
                currency: config.currency,
              }),
            }
          );

          const shopifyData = await shopifyResponse.json();

          if (shopifyData.success) {
            shopifyCustomerId = shopifyData.customer.id;
            shopifyCustomerCreated = shopifyData.customer.isNew;

            // Update the quote with Shopify customer ID
            await supabase
              .from('saved_quotes')
              .update({
                shopify_customer_id: shopifyCustomerId,
                source: 'manual_save'
              })
              .eq('id', quote.id);
          }
        } catch (shopifyError) {
          console.error('Failed to add customer to Shopify:', shopifyError);
          // Continue even if Shopify integration fails
        }
      }

      return new Response(
        JSON.stringify({
          success: true,
          quote: {
            id: quote.id,
            reference: quote.quote_reference,
            quoteName: quote.quote_name,
            customerReference: quote.customer_reference,
            nameAutoGenerated: quote.name_auto_generated,
            expiresAt: quote.expires_at,
            accessToken: quote.access_token,
            shopifyCustomerCreated: shopifyCustomerCreated,
            shopifyCustomerId: shopifyCustomerId,
          },
        }),
        {
          status: 200,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    if (req.method === 'GET') {
      // Retrieve a quote by ID and access token
      const url = new URL(req.url);
      const id = url.searchParams.get('id');
      const token = url.searchParams.get('token');

      if (!id || !token) {
        return new Response(
          JSON.stringify({ error: 'Missing required parameters: id and token' }),
          {
            status: 400,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' }
          }
        );
      }

      // Retrieve quote with token validation
      const { data: quote, error } = await supabase
        .from('saved_quotes')
        .select('*')
        .eq('id', id)
        .eq('access_token', token)
        .eq('status', 'saved')
        .gte('expires_at', new Date().toISOString())
        .maybeSingle();

      if (error) {
        throw new Error(`Failed to retrieve quote: ${error.message}`);
      }

      if (!quote) {
        return new Response(
          JSON.stringify({ error: 'Quote not found, expired, or invalid access token' }),
          {
            status: 404,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' }
          }
        );
      }

      // Update last_accessed_at
      await supabase
        .from('saved_quotes')
        .update({ last_accessed_at: new Date().toISOString() })
        .eq('id', quote.id);

      return new Response(
        JSON.stringify({ success: true, quote }),
        { 
          status: 200, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );
    }

    if (req.method === 'PATCH') {
      // Update quote status
      const { id, token, status } = await req.json();

      if (!id || !token || !status) {
        return new Response(
          JSON.stringify({ error: 'Missing required fields: id, token, and status' }),
          {
            status: 400,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' }
          }
        );
      }

      const { error } = await supabase
        .from('saved_quotes')
        .update({ status })
        .eq('id', id)
        .eq('access_token', token);

      if (error) {
        throw new Error(`Failed to update quote: ${error.message}`);
      }

      return new Response(
        JSON.stringify({ success: true }),
        { 
          status: 200, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );
    }

    return new Response(
      JSON.stringify({ error: 'Method not allowed' }),
      { 
        status: 405, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  } catch (error) {
    console.error('Error in save-quote function:', error);
    return new Response(
      JSON.stringify({ error: error.message || 'An unexpected error occurred' }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});